generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  fullName String
  password String    @unique
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  createdAt        DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  ingredients Ingredient[]
  items       ProductItem[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  // ingredientId Int
}

//variation of a product
model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  products  Product[]
  productId Int
  cartItems CartItem[]
}

model Cart {
  id     Int    @id @default(autoincrement())
  user   User?  @relation(fields: [userId], references: [id])
  userId Int?   @unique
  token  String

  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  items       CartItem[]
  order       Order[]
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  quantity    Int
  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  token String

  cartId      Int?
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  cart      Cart?    @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  code      String   @unique
  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
